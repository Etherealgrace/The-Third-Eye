// TF-Luna proximity alert with buzzer
#include <HardwareSerial.h>

// Pin Definitions
const int BUZZER_PIN = 25;        // Buzzer connected to GPIO25
const int DISTANCE_THRESHOLD = 25; // Alert threshold in centimeters

// Using ESP32's second hardware serial port for TF-Luna
HardwareSerial TFLuna(2);  // UART2 (GPIO16 = RX, GPIO17 = TX)

struct {
    uint16_t distance = 0;
    uint16_t strength = 0;
    uint16_t temperature = 0;
} tflunaData;

void setup() {
    // Initialize Serial Monitor
    Serial.begin(115200);
    
    // Initialize TF-Luna
    TFLuna.begin(115200, SERIAL_8N1, 16, 17);
    
    // Initialize Buzzer
    pinMode(BUZZER_PIN, OUTPUT);
    digitalWrite(BUZZER_PIN, LOW);
    
    Serial.println("TF-Luna Proximity Alert System Started");
    Serial.print("Alert Threshold: ");
    Serial.print(DISTANCE_THRESHOLD);
    Serial.println(" cm");
}

void loop() {
    if (readDistance()) {
        // Print the current distance
        Serial.print("Distance: ");
        Serial.print(tflunaData.distance);
        Serial.print(" cm\tSignal: ");
        Serial.println(tflunaData.strength);
        
        // Check if distance is less than threshold
        if (tflunaData.distance < DISTANCE_THRESHOLD && tflunaData.strength > 100) {
            // Object is too close - activate buzzer
            digitalWrite(BUZZER_PIN, HIGH);
            Serial.println("Alert: Object too close!");
        } else {
            // Object is beyond safe distance or signal too weak - silence buzzer
            digitalWrite(BUZZER_PIN, LOW);
        }
    }
    
    delay(50); // Small delay between readings
}

// Read data from TF-Luna
bool readDistance() {
    while (TFLuna.available() >= 9) {
        if (TFLuna.read() == 0x59) {
            if (TFLuna.read() == 0x59) {
                uint8_t buffer[7];
                TFLuna.readBytes(buffer, 7);
                
                // Calculate checksum
                uint8_t checksum = 0x59 + 0x59;
                for (int i = 0; i < 6; i++) {
                    checksum += buffer[i];
                }
                
                // Verify checksum
                if (checksum == buffer[6]) {
                    tflunaData.distance = buffer[0] | (buffer[1] << 8);
                    tflunaData.strength = buffer[2] | (buffer[3] << 8);
                    tflunaData.temperature = buffer[4] | (buffer[5] << 8);
                    
                    // Additional validation
                    if (tflunaData.distance <= 800) { // Max reliable range
                        return true;
                    }
                }
            }
        }
    }
    return false;
}
