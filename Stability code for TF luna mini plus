#include <HardwareSerial.h>

// Pin Definitions
const int BUZZER_PIN = 25;        
const int DISTANCE_THRESHOLD = 25; // Alert threshold in centimeters

// Stabilization parameters
const int WINDOW_SIZE = 5;        // Size of moving average window (smaller for faster response)
const int VALID_READINGS = 3;     // Minimum valid readings needed
const float MOVEMENT_THRESHOLD = 15.0; // Maximum allowed sudden change (cm)
const int MIN_STRENGTH = 100;     // Minimum signal strength

// Using ESP32's second hardware serial port
HardwareSerial TFLuna(2);  // UART2 (GPIO16 = RX, GPIO17 = TX)

// Variables for filtering
float filteredDistance = 0;
float lastValidDistance = 0;
float distances[WINDOW_SIZE];
int strengths[WINDOW_SIZE];
int readIndex = 0;
bool bufferFilled = false;

// Kalman filter variables
float kalmanDistance = 0;
float kalmanUncertainty = 2.0;
float kalmanNoise = 1.2;       // Measurement noise
float kalmanProcessNoise = 0.8; // Process noise

struct {
    uint16_t distance = 0;
    uint16_t strength = 0;
} tflunaData;

void setup() {
    Serial.begin(115200);
    TFLuna.begin(115200, SERIAL_8N1, 16, 17);
    pinMode(BUZZER_PIN, OUTPUT);
    
    // Initialize arrays
    for (int i = 0; i < WINDOW_SIZE; i++) {
        distances[i] = 0;
        strengths[i] = 0;
    }
    
    Serial.println("Stabilized TF-Luna System Started");
}

void loop() {
    if (readDistance()) {
        float stableDistance = stabilizeReading(tflunaData.distance, tflunaData.strength);
        
        // Only trigger alert if we have a stable reading
        if (stableDistance > 0) {
            Serial.print("Raw: ");
            Serial.print(tflunaData.distance);
            Serial.print(" cm\tStabilized: ");
            Serial.print(stableDistance);
            Serial.print(" cm\tStrength: ");
            Serial.println(tflunaData.strength);
            
            // Alert logic
            if (stableDistance < DISTANCE_THRESHOLD) {
                digitalWrite(BUZZER_PIN, HIGH);
                Serial.println("Alert: Object too close!");
            } else {
                digitalWrite(BUZZER_PIN, LOW);
            }
        }
    }
    delay(20); // Fast sampling rate for better stability
}

// Kalman filter implementation
float kalmanFilter(float measurement) {
    // Prediction
    float uncertainty = kalmanUncertainty + kalmanProcessNoise;
    
    // Update
    float gain = uncertainty / (uncertainty + kalmanNoise);
    float estimated = kalmanDistance + gain * (measurement - kalmanDistance);
    
    kalmanDistance = estimated;
    kalmanUncertainty = (1 - gain) * uncertainty;
    
    return estimated;
}

// Stabilize reading using multiple filtering techniques
float stabilizeReading(uint16_t rawDistance, uint16_t strength) {
    // Validate input
    if (rawDistance < 10 || rawDistance > 800 || strength < MIN_STRENGTH) {
        return lastValidDistance;
    }
    
    // Add to circular buffer
    distances[readIndex] = rawDistance;
    strengths[readIndex] = strength;
    readIndex = (readIndex + 1) % WINDOW_SIZE;
    
    if (readIndex == 0) {
        bufferFilled = true;
    }
    
    if (!bufferFilled) {
        return lastValidDistance;
    }
    
    // Calculate median
    float tempDist[WINDOW_SIZE];
    memcpy(tempDist, distances, sizeof(distances));
    for (int i = 0; i < WINDOW_SIZE - 1; i++) {
        for (int j = i + 1; j < WINDOW_SIZE; j++) {
            if (tempDist[i] > tempDist[j]) {
                float temp = tempDist[i];
                tempDist[i] = tempDist[j];
                tempDist[j] = temp;
            }
        }
    }
    float medianDistance = tempDist[WINDOW_SIZE / 2];
    
    // Apply Kalman filter to median
    float filtered = kalmanFilter(medianDistance);
    
    // Movement detection
    if (abs(filtered - lastValidDistance) > MOVEMENT_THRESHOLD) {
        // Sudden movement detected - use more aggressive smoothing
        filteredDistance = 0.7 * lastValidDistance + 0.3 * filtered;
    } else {
        // Normal movement - gentle smoothing
        filteredDistance = 0.3 * lastValidDistance + 0.7 * filtered;
    }
    
    lastValidDistance = filteredDistance;
    return filteredDistance;
}

// Read data from TF-Luna
bool readDistance() {
    if (TFLuna.available() >= 9) {
        if (TFLuna.read() == 0x59) {
            if (TFLuna.read() == 0x59) {
                uint8_t buffer[7];
                TFLuna.readBytes(buffer, 7);
                
                uint8_t checksum = 0x59 + 0x59;
                for (int i = 0; i < 6; i++) {
                    checksum += buffer[i];
                }
                
                if (checksum == buffer[6]) {
                    tflunaData.distance = buffer[0] | (buffer[1] << 8);
                    tflunaData.strength = buffer[2] | (buffer[3] << 8);
                    return true;
                }
            }
        }
    }
    return false;
}
